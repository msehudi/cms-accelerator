// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace CRM.Interface
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;

    /// <summary>
    /// This OData service is located at http://localhost
    /// </summary>
    public partial class DynamicsClient : ServiceClient<DynamicsClient>, IDynamicsClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Show only the first n items
        /// </summary>
        public int? Top167 { get; set; }

        /// <summary>
        /// Skip the first n items
        /// </summary>
        public int? Skip167 { get; set; }

        /// <summary>
        /// Include count of items
        /// </summary>
        public bool? Count167 { get; set; }

        /// <summary>
        /// Filter items by property values
        /// </summary>
        public string Filter167 { get; set; }

        /// <summary>
        /// Search items by search phrases
        /// </summary>
        public string Search167 { get; set; }

        /// <summary>
        /// Subscription credentials which uniquely identify client subscription.
        /// </summary>
        public ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// Gets the IAccounts.
        /// </summary>
        public virtual IAccounts Accounts { get; private set; }

        /// <summary>
        /// Gets the IPartyidrraapplication.
        /// </summary>
        public virtual IPartyidrraapplication Partyidrraapplication { get; private set; }

        /// <summary>
        /// Gets the IRegardingobjectidrraapplication.
        /// </summary>
        public virtual IRegardingobjectidrraapplication Regardingobjectidrraapplication { get; private set; }

        /// <summary>
        /// Gets the IObjectidrraapplication.
        /// </summary>
        public virtual IObjectidrraapplication Objectidrraapplication { get; private set; }

        /// <summary>
        /// Gets the IRegardingobjectidrraapplicationappointment.
        /// </summary>
        public virtual IRegardingobjectidrraapplicationappointment Regardingobjectidrraapplicationappointment { get; private set; }

        /// <summary>
        /// Gets the IRegardingobjectidrraindustrysector.
        /// </summary>
        public virtual IRegardingobjectidrraindustrysector Regardingobjectidrraindustrysector { get; private set; }

        /// <summary>
        /// Gets the IRegardingobjectidrramodule.
        /// </summary>
        public virtual IRegardingobjectidrramodule Regardingobjectidrramodule { get; private set; }

        /// <summary>
        /// Gets the IRegardingobjectidrraprogram.
        /// </summary>
        public virtual IRegardingobjectidrraprogram Regardingobjectidrraprogram { get; private set; }

        /// <summary>
        /// Gets the IRegardingobjectidrraquestion.
        /// </summary>
        public virtual IRegardingobjectidrraquestion Regardingobjectidrraquestion { get; private set; }

        /// <summary>
        /// Gets the IRegardingobjectidrraquestiontype.
        /// </summary>
        public virtual IRegardingobjectidrraquestiontype Regardingobjectidrraquestiontype { get; private set; }

        /// <summary>
        /// Gets the IRegardingobjectidrraresponse.
        /// </summary>
        public virtual IRegardingobjectidrraresponse Regardingobjectidrraresponse { get; private set; }

        /// <summary>
        /// Gets the IRegardingobjectidrrawebpage.
        /// </summary>
        public virtual IRegardingobjectidrrawebpage Regardingobjectidrrawebpage { get; private set; }

        /// <summary>
        /// Gets the IBusinessunitrraapplication.
        /// </summary>
        public virtual IBusinessunitrraapplication Businessunitrraapplication { get; private set; }

        /// <summary>
        /// Gets the IBusinessunitrraindustrysector.
        /// </summary>
        public virtual IBusinessunitrraindustrysector Businessunitrraindustrysector { get; private set; }

        /// <summary>
        /// Gets the IBusinessunitrramodule.
        /// </summary>
        public virtual IBusinessunitrramodule Businessunitrramodule { get; private set; }

        /// <summary>
        /// Gets the IBusinessunitrraprogram.
        /// </summary>
        public virtual IBusinessunitrraprogram Businessunitrraprogram { get; private set; }

        /// <summary>
        /// Gets the IBusinessunitrraquestion.
        /// </summary>
        public virtual IBusinessunitrraquestion Businessunitrraquestion { get; private set; }

        /// <summary>
        /// Gets the IBusinessunitrraquestiontype.
        /// </summary>
        public virtual IBusinessunitrraquestiontype Businessunitrraquestiontype { get; private set; }

        /// <summary>
        /// Gets the IBusinessunitrraresponse.
        /// </summary>
        public virtual IBusinessunitrraresponse Businessunitrraresponse { get; private set; }

        /// <summary>
        /// Gets the IBusinessunitrrawebpage.
        /// </summary>
        public virtual IBusinessunitrrawebpage Businessunitrrawebpage { get; private set; }

        /// <summary>
        /// Gets the IRecord1idrraapplication.
        /// </summary>
        public virtual IRecord1idrraapplication Record1idrraapplication { get; private set; }

        /// <summary>
        /// Gets the IRecord2idrraapplication.
        /// </summary>
        public virtual IRecord2idrraapplication Record2idrraapplication { get; private set; }

        /// <summary>
        /// Gets the IContacts.
        /// </summary>
        public virtual IContacts Contacts { get; private set; }

        /// <summary>
        /// Gets the IContactrraapplicationcontact.
        /// </summary>
        public virtual IContactrraapplicationcontact Contactrraapplicationcontact { get; private set; }

        /// <summary>
        /// Gets the IBaserecordidrraapplication.
        /// </summary>
        public virtual IBaserecordidrraapplication Baserecordidrraapplication { get; private set; }

        /// <summary>
        /// Gets the IBaserecordidrraindustrysector.
        /// </summary>
        public virtual IBaserecordidrraindustrysector Baserecordidrraindustrysector { get; private set; }

        /// <summary>
        /// Gets the IBaserecordidrramodule.
        /// </summary>
        public virtual IBaserecordidrramodule Baserecordidrramodule { get; private set; }

        /// <summary>
        /// Gets the IBaserecordidrraprogram.
        /// </summary>
        public virtual IBaserecordidrraprogram Baserecordidrraprogram { get; private set; }

        /// <summary>
        /// Gets the IBaserecordidrraquestion.
        /// </summary>
        public virtual IBaserecordidrraquestion Baserecordidrraquestion { get; private set; }

        /// <summary>
        /// Gets the IBaserecordidrraquestiontype.
        /// </summary>
        public virtual IBaserecordidrraquestiontype Baserecordidrraquestiontype { get; private set; }

        /// <summary>
        /// Gets the IBaserecordidrraresponse.
        /// </summary>
        public virtual IBaserecordidrraresponse Baserecordidrraresponse { get; private set; }

        /// <summary>
        /// Gets the IBaserecordidrrawebpage.
        /// </summary>
        public virtual IBaserecordidrrawebpage Baserecordidrrawebpage { get; private set; }

        /// <summary>
        /// Gets the IDuplicaterecordidrraapplication.
        /// </summary>
        public virtual IDuplicaterecordidrraapplication Duplicaterecordidrraapplication { get; private set; }

        /// <summary>
        /// Gets the IDuplicaterecordidrraindustrysector.
        /// </summary>
        public virtual IDuplicaterecordidrraindustrysector Duplicaterecordidrraindustrysector { get; private set; }

        /// <summary>
        /// Gets the IDuplicaterecordidrramodule.
        /// </summary>
        public virtual IDuplicaterecordidrramodule Duplicaterecordidrramodule { get; private set; }

        /// <summary>
        /// Gets the IDuplicaterecordidrraprogram.
        /// </summary>
        public virtual IDuplicaterecordidrraprogram Duplicaterecordidrraprogram { get; private set; }

        /// <summary>
        /// Gets the IDuplicaterecordidrraquestion.
        /// </summary>
        public virtual IDuplicaterecordidrraquestion Duplicaterecordidrraquestion { get; private set; }

        /// <summary>
        /// Gets the IDuplicaterecordidrraquestiontype.
        /// </summary>
        public virtual IDuplicaterecordidrraquestiontype Duplicaterecordidrraquestiontype { get; private set; }

        /// <summary>
        /// Gets the IDuplicaterecordidrraresponse.
        /// </summary>
        public virtual IDuplicaterecordidrraresponse Duplicaterecordidrraresponse { get; private set; }

        /// <summary>
        /// Gets the IDuplicaterecordidrrawebpage.
        /// </summary>
        public virtual IDuplicaterecordidrrawebpage Duplicaterecordidrrawebpage { get; private set; }

        /// <summary>
        /// Gets the IRegardingobjectidrraapplicationemail.
        /// </summary>
        public virtual IRegardingobjectidrraapplicationemail Regardingobjectidrraapplicationemail { get; private set; }

        /// <summary>
        /// Gets the IEntitydefinitions.
        /// </summary>
        public virtual IEntitydefinitions Entitydefinitions { get; private set; }

        /// <summary>
        /// Gets the IRegardingobjectidrraapplicationfax.
        /// </summary>
        public virtual IRegardingobjectidrraapplicationfax Regardingobjectidrraapplicationfax { get; private set; }

        /// <summary>
        /// Gets the IGlobaloptionsetdefinitions.
        /// </summary>
        public virtual IGlobaloptionsetdefinitions Globaloptionsetdefinitions { get; private set; }

        /// <summary>
        /// Gets the IRegardingobjectidrraapplicationletter.
        /// </summary>
        public virtual IRegardingobjectidrraapplicationletter Regardingobjectidrraapplicationletter { get; private set; }

        /// <summary>
        /// Gets the IRegardingobjectidrraapplicationphonecall.
        /// </summary>
        public virtual IRegardingobjectidrraapplicationphonecall Regardingobjectidrraapplicationphonecall { get; private set; }

        /// <summary>
        /// Gets the IObjectidrraindustrysector.
        /// </summary>
        public virtual IObjectidrraindustrysector Objectidrraindustrysector { get; private set; }

        /// <summary>
        /// Gets the IObjectidrramodule.
        /// </summary>
        public virtual IObjectidrramodule Objectidrramodule { get; private set; }

        /// <summary>
        /// Gets the IObjectidrraprogram.
        /// </summary>
        public virtual IObjectidrraprogram Objectidrraprogram { get; private set; }

        /// <summary>
        /// Gets the IObjectidrraquestion.
        /// </summary>
        public virtual IObjectidrraquestion Objectidrraquestion { get; private set; }

        /// <summary>
        /// Gets the IObjectidrraquestiontype.
        /// </summary>
        public virtual IObjectidrraquestiontype Objectidrraquestiontype { get; private set; }

        /// <summary>
        /// Gets the IObjectidrraresponse.
        /// </summary>
        public virtual IObjectidrraresponse Objectidrraresponse { get; private set; }

        /// <summary>
        /// Gets the IObjectidrrawebpage.
        /// </summary>
        public virtual IObjectidrrawebpage Objectidrrawebpage { get; private set; }

        /// <summary>
        /// Gets the IRegardingobjectidrraapplicationrecurringappointmentmaster.
        /// </summary>
        public virtual IRegardingobjectidrraapplicationrecurringappointmentmaster Regardingobjectidrraapplicationrecurringappointmentmaster { get; private set; }

        /// <summary>
        /// Gets the IApplicationrrawebpageset.
        /// </summary>
        public virtual IApplicationrrawebpageset Applicationrrawebpageset { get; private set; }

        /// <summary>
        /// Gets the IApplications.
        /// </summary>
        public virtual IApplications Applications { get; private set; }

        /// <summary>
        /// Gets the IApplicationactivityparties.
        /// </summary>
        public virtual IApplicationactivityparties Applicationactivityparties { get; private set; }

        /// <summary>
        /// Gets the IApplicationactivitypointers.
        /// </summary>
        public virtual IApplicationactivitypointers Applicationactivitypointers { get; private set; }

        /// <summary>
        /// Gets the IApplicationannotations.
        /// </summary>
        public virtual IApplicationannotations Applicationannotations { get; private set; }

        /// <summary>
        /// Gets the IApplicationappointments.
        /// </summary>
        public virtual IApplicationappointments Applicationappointments { get; private set; }

        /// <summary>
        /// Gets the IApplicationasyncoperations.
        /// </summary>
        public virtual IApplicationasyncoperations Applicationasyncoperations { get; private set; }

        /// <summary>
        /// Gets the IApplicationbulkdeletefailures.
        /// </summary>
        public virtual IApplicationbulkdeletefailures Applicationbulkdeletefailures { get; private set; }

        /// <summary>
        /// Gets the IApplicationconnections1.
        /// </summary>
        public virtual IApplicationconnections1 Applicationconnections1 { get; private set; }

        /// <summary>
        /// Gets the IApplicationconnections2.
        /// </summary>
        public virtual IApplicationconnections2 Applicationconnections2 { get; private set; }

        /// <summary>
        /// Gets the IApplicationduplicatebaserecord.
        /// </summary>
        public virtual IApplicationduplicatebaserecord Applicationduplicatebaserecord { get; private set; }

        /// <summary>
        /// Gets the IApplicationduplicatematchingrecord.
        /// </summary>
        public virtual IApplicationduplicatematchingrecord Applicationduplicatematchingrecord { get; private set; }

        /// <summary>
        /// Gets the IApplicationemails.
        /// </summary>
        public virtual IApplicationemails Applicationemails { get; private set; }

        /// <summary>
        /// Gets the IApplicationfaxes.
        /// </summary>
        public virtual IApplicationfaxes Applicationfaxes { get; private set; }

        /// <summary>
        /// Gets the IApplicationfeedback.
        /// </summary>
        public virtual IApplicationfeedback Applicationfeedback { get; private set; }

        /// <summary>
        /// Gets the IApplicationletters.
        /// </summary>
        public virtual IApplicationletters Applicationletters { get; private set; }

        /// <summary>
        /// Gets the IApplicationmailboxtrackingfolders.
        /// </summary>
        public virtual IApplicationmailboxtrackingfolders Applicationmailboxtrackingfolders { get; private set; }

        /// <summary>
        /// Gets the IApplicationphonecalls.
        /// </summary>
        public virtual IApplicationphonecalls Applicationphonecalls { get; private set; }

        /// <summary>
        /// Gets the IApplicationprincipalobjectattributeaccesses.
        /// </summary>
        public virtual IApplicationprincipalobjectattributeaccesses Applicationprincipalobjectattributeaccesses { get; private set; }

        /// <summary>
        /// Gets the IApplicationprocesssession.
        /// </summary>
        public virtual IApplicationprocesssession Applicationprocesssession { get; private set; }

        /// <summary>
        /// Gets the IApplicationqueueitems.
        /// </summary>
        public virtual IApplicationqueueitems Applicationqueueitems { get; private set; }

        /// <summary>
        /// Gets the IApplicationrecurringappointmentmasters.
        /// </summary>
        public virtual IApplicationrecurringappointmentmasters Applicationrecurringappointmentmasters { get; private set; }

        /// <summary>
        /// Gets the IApplicationrraresponse.
        /// </summary>
        public virtual IApplicationrraresponse Applicationrraresponse { get; private set; }

        /// <summary>
        /// Gets the IApplicationrrawebpage.
        /// </summary>
        public virtual IApplicationrrawebpage Applicationrrawebpage { get; private set; }

        /// <summary>
        /// Gets the IApplicationsharepointdocumentlocations.
        /// </summary>
        public virtual IApplicationsharepointdocumentlocations Applicationsharepointdocumentlocations { get; private set; }

        /// <summary>
        /// Gets the IApplicationsocialactivities.
        /// </summary>
        public virtual IApplicationsocialactivities Applicationsocialactivities { get; private set; }

        /// <summary>
        /// Gets the IApplicationsyncerrors.
        /// </summary>
        public virtual IApplicationsyncerrors Applicationsyncerrors { get; private set; }

        /// <summary>
        /// Gets the IApplicationtasks.
        /// </summary>
        public virtual IApplicationtasks Applicationtasks { get; private set; }

        /// <summary>
        /// Gets the IApplicationteams.
        /// </summary>
        public virtual IApplicationteams Applicationteams { get; private set; }

        /// <summary>
        /// Gets the IContact.
        /// </summary>
        public virtual IContact Contact { get; private set; }

        /// <summary>
        /// Gets the IModule.
        /// </summary>
        public virtual IModule Module { get; private set; }

        /// <summary>
        /// Gets the IIndustrysectors.
        /// </summary>
        public virtual IIndustrysectors Industrysectors { get; private set; }

        /// <summary>
        /// Gets the IIndustrysectorasyncoperations.
        /// </summary>
        public virtual IIndustrysectorasyncoperations Industrysectorasyncoperations { get; private set; }

        /// <summary>
        /// Gets the IIndustrysectorbulkdeletefailures.
        /// </summary>
        public virtual IIndustrysectorbulkdeletefailures Industrysectorbulkdeletefailures { get; private set; }

        /// <summary>
        /// Gets the IIndustrysectorduplicatebaserecord.
        /// </summary>
        public virtual IIndustrysectorduplicatebaserecord Industrysectorduplicatebaserecord { get; private set; }

        /// <summary>
        /// Gets the IIndustrysectorduplicatematchingrecord.
        /// </summary>
        public virtual IIndustrysectorduplicatematchingrecord Industrysectorduplicatematchingrecord { get; private set; }

        /// <summary>
        /// Gets the IIndustrysectormailboxtrackingfolders.
        /// </summary>
        public virtual IIndustrysectormailboxtrackingfolders Industrysectormailboxtrackingfolders { get; private set; }

        /// <summary>
        /// Gets the IIndustrysectorprincipalobjectattributeaccesses.
        /// </summary>
        public virtual IIndustrysectorprincipalobjectattributeaccesses Industrysectorprincipalobjectattributeaccesses { get; private set; }

        /// <summary>
        /// Gets the IIndustrysectorprocesssession.
        /// </summary>
        public virtual IIndustrysectorprocesssession Industrysectorprocesssession { get; private set; }

        /// <summary>
        /// Gets the IIndustrysectorsyncerrors.
        /// </summary>
        public virtual IIndustrysectorsyncerrors Industrysectorsyncerrors { get; private set; }

        /// <summary>
        /// Gets the IModules.
        /// </summary>
        public virtual IModules Modules { get; private set; }

        /// <summary>
        /// Gets the IModuleasyncoperations.
        /// </summary>
        public virtual IModuleasyncoperations Moduleasyncoperations { get; private set; }

        /// <summary>
        /// Gets the IModulebulkdeletefailures.
        /// </summary>
        public virtual IModulebulkdeletefailures Modulebulkdeletefailures { get; private set; }

        /// <summary>
        /// Gets the IModuleduplicatebaserecord.
        /// </summary>
        public virtual IModuleduplicatebaserecord Moduleduplicatebaserecord { get; private set; }

        /// <summary>
        /// Gets the IModuleduplicatematchingrecord.
        /// </summary>
        public virtual IModuleduplicatematchingrecord Moduleduplicatematchingrecord { get; private set; }

        /// <summary>
        /// Gets the IModulemailboxtrackingfolders.
        /// </summary>
        public virtual IModulemailboxtrackingfolders Modulemailboxtrackingfolders { get; private set; }

        /// <summary>
        /// Gets the IModuleprincipalobjectattributeaccesses.
        /// </summary>
        public virtual IModuleprincipalobjectattributeaccesses Moduleprincipalobjectattributeaccesses { get; private set; }

        /// <summary>
        /// Gets the IModuleprocesssession.
        /// </summary>
        public virtual IModuleprocesssession Moduleprocesssession { get; private set; }

        /// <summary>
        /// Gets the IModulerraapplication.
        /// </summary>
        public virtual IModulerraapplication Modulerraapplication { get; private set; }

        /// <summary>
        /// Gets the IModulerrawebpage.
        /// </summary>
        public virtual IModulerrawebpage Modulerrawebpage { get; private set; }

        /// <summary>
        /// Gets the IModulesyncerrors.
        /// </summary>
        public virtual IModulesyncerrors Modulesyncerrors { get; private set; }

        /// <summary>
        /// Gets the IProgramid.
        /// </summary>
        public virtual IProgramid Programid { get; private set; }

        /// <summary>
        /// Gets the IPrograms.
        /// </summary>
        public virtual IPrograms Programs { get; private set; }

        /// <summary>
        /// Gets the IProgramasyncoperations.
        /// </summary>
        public virtual IProgramasyncoperations Programasyncoperations { get; private set; }

        /// <summary>
        /// Gets the IProgrambulkdeletefailures.
        /// </summary>
        public virtual IProgrambulkdeletefailures Programbulkdeletefailures { get; private set; }

        /// <summary>
        /// Gets the IProgramduplicatebaserecord.
        /// </summary>
        public virtual IProgramduplicatebaserecord Programduplicatebaserecord { get; private set; }

        /// <summary>
        /// Gets the IProgramduplicatematchingrecord.
        /// </summary>
        public virtual IProgramduplicatematchingrecord Programduplicatematchingrecord { get; private set; }

        /// <summary>
        /// Gets the IProgrammailboxtrackingfolders.
        /// </summary>
        public virtual IProgrammailboxtrackingfolders Programmailboxtrackingfolders { get; private set; }

        /// <summary>
        /// Gets the IProgramprincipalobjectattributeaccesses.
        /// </summary>
        public virtual IProgramprincipalobjectattributeaccesses Programprincipalobjectattributeaccesses { get; private set; }

        /// <summary>
        /// Gets the IProgramprocesssession.
        /// </summary>
        public virtual IProgramprocesssession Programprocesssession { get; private set; }

        /// <summary>
        /// Gets the IProgramrramodule.
        /// </summary>
        public virtual IProgramrramodule Programrramodule { get; private set; }

        /// <summary>
        /// Gets the IProgramsyncerrors.
        /// </summary>
        public virtual IProgramsyncerrors Programsyncerrors { get; private set; }

        /// <summary>
        /// Gets the IQuestions.
        /// </summary>
        public virtual IQuestions Questions { get; private set; }

        /// <summary>
        /// Gets the IQuestionasyncoperations.
        /// </summary>
        public virtual IQuestionasyncoperations Questionasyncoperations { get; private set; }

        /// <summary>
        /// Gets the IQuestionbulkdeletefailures.
        /// </summary>
        public virtual IQuestionbulkdeletefailures Questionbulkdeletefailures { get; private set; }

        /// <summary>
        /// Gets the IQuestionduplicatebaserecord.
        /// </summary>
        public virtual IQuestionduplicatebaserecord Questionduplicatebaserecord { get; private set; }

        /// <summary>
        /// Gets the IQuestionduplicatematchingrecord.
        /// </summary>
        public virtual IQuestionduplicatematchingrecord Questionduplicatematchingrecord { get; private set; }

        /// <summary>
        /// Gets the IQuestionmailboxtrackingfolders.
        /// </summary>
        public virtual IQuestionmailboxtrackingfolders Questionmailboxtrackingfolders { get; private set; }

        /// <summary>
        /// Gets the IQuestionprincipalobjectattributeaccesses.
        /// </summary>
        public virtual IQuestionprincipalobjectattributeaccesses Questionprincipalobjectattributeaccesses { get; private set; }

        /// <summary>
        /// Gets the IQuestionprocesssession.
        /// </summary>
        public virtual IQuestionprocesssession Questionprocesssession { get; private set; }

        /// <summary>
        /// Gets the IQuestionrraresponsequestion.
        /// </summary>
        public virtual IQuestionrraresponsequestion Questionrraresponsequestion { get; private set; }

        /// <summary>
        /// Gets the IQuestionsyncerrors.
        /// </summary>
        public virtual IQuestionsyncerrors Questionsyncerrors { get; private set; }

        /// <summary>
        /// Gets the IQuestiontype.
        /// </summary>
        public virtual IQuestiontype Questiontype { get; private set; }

        /// <summary>
        /// Gets the IWebpageid.
        /// </summary>
        public virtual IWebpageid Webpageid { get; private set; }

        /// <summary>
        /// Gets the IQuestiontypes.
        /// </summary>
        public virtual IQuestiontypes Questiontypes { get; private set; }

        /// <summary>
        /// Gets the IQuestiontypeasyncoperations.
        /// </summary>
        public virtual IQuestiontypeasyncoperations Questiontypeasyncoperations { get; private set; }

        /// <summary>
        /// Gets the IQuestiontypebulkdeletefailures.
        /// </summary>
        public virtual IQuestiontypebulkdeletefailures Questiontypebulkdeletefailures { get; private set; }

        /// <summary>
        /// Gets the IQuestiontypeduplicatebaserecord.
        /// </summary>
        public virtual IQuestiontypeduplicatebaserecord Questiontypeduplicatebaserecord { get; private set; }

        /// <summary>
        /// Gets the IQuestiontypeduplicatematchingrecord.
        /// </summary>
        public virtual IQuestiontypeduplicatematchingrecord Questiontypeduplicatematchingrecord { get; private set; }

        /// <summary>
        /// Gets the IQuestiontypemailboxtrackingfolders.
        /// </summary>
        public virtual IQuestiontypemailboxtrackingfolders Questiontypemailboxtrackingfolders { get; private set; }

        /// <summary>
        /// Gets the IQuestiontypeprincipalobjectattributeaccesses.
        /// </summary>
        public virtual IQuestiontypeprincipalobjectattributeaccesses Questiontypeprincipalobjectattributeaccesses { get; private set; }

        /// <summary>
        /// Gets the IQuestiontypeprocesssession.
        /// </summary>
        public virtual IQuestiontypeprocesssession Questiontypeprocesssession { get; private set; }

        /// <summary>
        /// Gets the IQuestiontypesyncerrors.
        /// </summary>
        public virtual IQuestiontypesyncerrors Questiontypesyncerrors { get; private set; }

        /// <summary>
        /// Gets the IRraquestiontyperraquestionquestiontype.
        /// </summary>
        public virtual IRraquestiontyperraquestionquestiontype Rraquestiontyperraquestionquestiontype { get; private set; }

        /// <summary>
        /// Gets the IResponses.
        /// </summary>
        public virtual IResponses Responses { get; private set; }

        /// <summary>
        /// Gets the IApplicationid.
        /// </summary>
        public virtual IApplicationid Applicationid { get; private set; }

        /// <summary>
        /// Gets the IQuestion.
        /// </summary>
        public virtual IQuestion Question { get; private set; }

        /// <summary>
        /// Gets the IResponseasyncoperations.
        /// </summary>
        public virtual IResponseasyncoperations Responseasyncoperations { get; private set; }

        /// <summary>
        /// Gets the IResponsebulkdeletefailures.
        /// </summary>
        public virtual IResponsebulkdeletefailures Responsebulkdeletefailures { get; private set; }

        /// <summary>
        /// Gets the IResponseduplicatebaserecord.
        /// </summary>
        public virtual IResponseduplicatebaserecord Responseduplicatebaserecord { get; private set; }

        /// <summary>
        /// Gets the IResponseduplicatematchingrecord.
        /// </summary>
        public virtual IResponseduplicatematchingrecord Responseduplicatematchingrecord { get; private set; }

        /// <summary>
        /// Gets the IResponsemailboxtrackingfolders.
        /// </summary>
        public virtual IResponsemailboxtrackingfolders Responsemailboxtrackingfolders { get; private set; }

        /// <summary>
        /// Gets the IResponseprincipalobjectattributeaccesses.
        /// </summary>
        public virtual IResponseprincipalobjectattributeaccesses Responseprincipalobjectattributeaccesses { get; private set; }

        /// <summary>
        /// Gets the IResponseprocesssession.
        /// </summary>
        public virtual IResponseprocesssession Responseprocesssession { get; private set; }

        /// <summary>
        /// Gets the IResponsesyncerrors.
        /// </summary>
        public virtual IResponsesyncerrors Responsesyncerrors { get; private set; }

        /// <summary>
        /// Gets the IWebpages.
        /// </summary>
        public virtual IWebpages Webpages { get; private set; }

        /// <summary>
        /// Gets the IModuleid.
        /// </summary>
        public virtual IModuleid Moduleid { get; private set; }

        /// <summary>
        /// Gets the IParentwebpage.
        /// </summary>
        public virtual IParentwebpage Parentwebpage { get; private set; }

        /// <summary>
        /// Gets the IParentwebpageid.
        /// </summary>
        public virtual IParentwebpageid Parentwebpageid { get; private set; }

        /// <summary>
        /// Gets the IWebpageasyncoperations.
        /// </summary>
        public virtual IWebpageasyncoperations Webpageasyncoperations { get; private set; }

        /// <summary>
        /// Gets the IWebpagebulkdeletefailures.
        /// </summary>
        public virtual IWebpagebulkdeletefailures Webpagebulkdeletefailures { get; private set; }

        /// <summary>
        /// Gets the IWebpageduplicatebaserecord.
        /// </summary>
        public virtual IWebpageduplicatebaserecord Webpageduplicatebaserecord { get; private set; }

        /// <summary>
        /// Gets the IWebpageduplicatematchingrecord.
        /// </summary>
        public virtual IWebpageduplicatematchingrecord Webpageduplicatematchingrecord { get; private set; }

        /// <summary>
        /// Gets the IWebpagemailboxtrackingfolders.
        /// </summary>
        public virtual IWebpagemailboxtrackingfolders Webpagemailboxtrackingfolders { get; private set; }

        /// <summary>
        /// Gets the IWebpageprincipalobjectattributeaccesses.
        /// </summary>
        public virtual IWebpageprincipalobjectattributeaccesses Webpageprincipalobjectattributeaccesses { get; private set; }

        /// <summary>
        /// Gets the IWebpageprocesssession.
        /// </summary>
        public virtual IWebpageprocesssession Webpageprocesssession { get; private set; }

        /// <summary>
        /// Gets the IWebpagerraquestion.
        /// </summary>
        public virtual IWebpagerraquestion Webpagerraquestion { get; private set; }

        /// <summary>
        /// Gets the IWebpagesyncerrors.
        /// </summary>
        public virtual IWebpagesyncerrors Webpagesyncerrors { get; private set; }

        /// <summary>
        /// Gets the ISavedqueries.
        /// </summary>
        public virtual ISavedqueries Savedqueries { get; private set; }

        /// <summary>
        /// Gets the ISharepointdocumentlocations.
        /// </summary>
        public virtual ISharepointdocumentlocations Sharepointdocumentlocations { get; private set; }

        /// <summary>
        /// Gets the ISharepointsites.
        /// </summary>
        public virtual ISharepointsites Sharepointsites { get; private set; }

        /// <summary>
        /// Gets the IRegardingobjectidrraapplicationsocialactivity.
        /// </summary>
        public virtual IRegardingobjectidrraapplicationsocialactivity Regardingobjectidrraapplicationsocialactivity { get; private set; }

        /// <summary>
        /// Gets the ISystemforms.
        /// </summary>
        public virtual ISystemforms Systemforms { get; private set; }

        /// <summary>
        /// Gets the ISystemusers.
        /// </summary>
        public virtual ISystemusers Systemusers { get; private set; }

        /// <summary>
        /// Gets the ILkrraapplicationcreatedby.
        /// </summary>
        public virtual ILkrraapplicationcreatedby Lkrraapplicationcreatedby { get; private set; }

        /// <summary>
        /// Gets the ILkrraapplicationcreatedonbehalfby.
        /// </summary>
        public virtual ILkrraapplicationcreatedonbehalfby Lkrraapplicationcreatedonbehalfby { get; private set; }

        /// <summary>
        /// Gets the ILkrraapplicationmodifiedby.
        /// </summary>
        public virtual ILkrraapplicationmodifiedby Lkrraapplicationmodifiedby { get; private set; }

        /// <summary>
        /// Gets the ILkrraapplicationmodifiedonbehalfby.
        /// </summary>
        public virtual ILkrraapplicationmodifiedonbehalfby Lkrraapplicationmodifiedonbehalfby { get; private set; }

        /// <summary>
        /// Gets the ILkrraindustrysectorcreatedby.
        /// </summary>
        public virtual ILkrraindustrysectorcreatedby Lkrraindustrysectorcreatedby { get; private set; }

        /// <summary>
        /// Gets the ILkrraindustrysectorcreatedonbehalfby.
        /// </summary>
        public virtual ILkrraindustrysectorcreatedonbehalfby Lkrraindustrysectorcreatedonbehalfby { get; private set; }

        /// <summary>
        /// Gets the ILkrraindustrysectormodifiedby.
        /// </summary>
        public virtual ILkrraindustrysectormodifiedby Lkrraindustrysectormodifiedby { get; private set; }

        /// <summary>
        /// Gets the ILkrraindustrysectormodifiedonbehalfby.
        /// </summary>
        public virtual ILkrraindustrysectormodifiedonbehalfby Lkrraindustrysectormodifiedonbehalfby { get; private set; }

        /// <summary>
        /// Gets the ILkrramodulecreatedby.
        /// </summary>
        public virtual ILkrramodulecreatedby Lkrramodulecreatedby { get; private set; }

        /// <summary>
        /// Gets the ILkrramodulecreatedonbehalfby.
        /// </summary>
        public virtual ILkrramodulecreatedonbehalfby Lkrramodulecreatedonbehalfby { get; private set; }

        /// <summary>
        /// Gets the ILkrramodulemodifiedby.
        /// </summary>
        public virtual ILkrramodulemodifiedby Lkrramodulemodifiedby { get; private set; }

        /// <summary>
        /// Gets the ILkrramodulemodifiedonbehalfby.
        /// </summary>
        public virtual ILkrramodulemodifiedonbehalfby Lkrramodulemodifiedonbehalfby { get; private set; }

        /// <summary>
        /// Gets the ILkrraprogramcreatedby.
        /// </summary>
        public virtual ILkrraprogramcreatedby Lkrraprogramcreatedby { get; private set; }

        /// <summary>
        /// Gets the ILkrraprogramcreatedonbehalfby.
        /// </summary>
        public virtual ILkrraprogramcreatedonbehalfby Lkrraprogramcreatedonbehalfby { get; private set; }

        /// <summary>
        /// Gets the ILkrraprogrammodifiedby.
        /// </summary>
        public virtual ILkrraprogrammodifiedby Lkrraprogrammodifiedby { get; private set; }

        /// <summary>
        /// Gets the ILkrraprogrammodifiedonbehalfby.
        /// </summary>
        public virtual ILkrraprogrammodifiedonbehalfby Lkrraprogrammodifiedonbehalfby { get; private set; }

        /// <summary>
        /// Gets the ILkrraquestioncreatedby.
        /// </summary>
        public virtual ILkrraquestioncreatedby Lkrraquestioncreatedby { get; private set; }

        /// <summary>
        /// Gets the ILkrraquestioncreatedonbehalfby.
        /// </summary>
        public virtual ILkrraquestioncreatedonbehalfby Lkrraquestioncreatedonbehalfby { get; private set; }

        /// <summary>
        /// Gets the ILkrraquestionmodifiedby.
        /// </summary>
        public virtual ILkrraquestionmodifiedby Lkrraquestionmodifiedby { get; private set; }

        /// <summary>
        /// Gets the ILkrraquestionmodifiedonbehalfby.
        /// </summary>
        public virtual ILkrraquestionmodifiedonbehalfby Lkrraquestionmodifiedonbehalfby { get; private set; }

        /// <summary>
        /// Gets the ILkrraquestiontypecreatedby.
        /// </summary>
        public virtual ILkrraquestiontypecreatedby Lkrraquestiontypecreatedby { get; private set; }

        /// <summary>
        /// Gets the ILkrraquestiontypecreatedonbehalfby.
        /// </summary>
        public virtual ILkrraquestiontypecreatedonbehalfby Lkrraquestiontypecreatedonbehalfby { get; private set; }

        /// <summary>
        /// Gets the ILkrraquestiontypemodifiedby.
        /// </summary>
        public virtual ILkrraquestiontypemodifiedby Lkrraquestiontypemodifiedby { get; private set; }

        /// <summary>
        /// Gets the ILkrraquestiontypemodifiedonbehalfby.
        /// </summary>
        public virtual ILkrraquestiontypemodifiedonbehalfby Lkrraquestiontypemodifiedonbehalfby { get; private set; }

        /// <summary>
        /// Gets the ILkrraresponsecreatedby.
        /// </summary>
        public virtual ILkrraresponsecreatedby Lkrraresponsecreatedby { get; private set; }

        /// <summary>
        /// Gets the ILkrraresponsecreatedonbehalfby.
        /// </summary>
        public virtual ILkrraresponsecreatedonbehalfby Lkrraresponsecreatedonbehalfby { get; private set; }

        /// <summary>
        /// Gets the ILkrraresponsemodifiedby.
        /// </summary>
        public virtual ILkrraresponsemodifiedby Lkrraresponsemodifiedby { get; private set; }

        /// <summary>
        /// Gets the ILkrraresponsemodifiedonbehalfby.
        /// </summary>
        public virtual ILkrraresponsemodifiedonbehalfby Lkrraresponsemodifiedonbehalfby { get; private set; }

        /// <summary>
        /// Gets the ILkrrawebpagecreatedby.
        /// </summary>
        public virtual ILkrrawebpagecreatedby Lkrrawebpagecreatedby { get; private set; }

        /// <summary>
        /// Gets the ILkrrawebpagecreatedonbehalfby.
        /// </summary>
        public virtual ILkrrawebpagecreatedonbehalfby Lkrrawebpagecreatedonbehalfby { get; private set; }

        /// <summary>
        /// Gets the ILkrrawebpagemodifiedby.
        /// </summary>
        public virtual ILkrrawebpagemodifiedby Lkrrawebpagemodifiedby { get; private set; }

        /// <summary>
        /// Gets the ILkrrawebpagemodifiedonbehalfby.
        /// </summary>
        public virtual ILkrrawebpagemodifiedonbehalfby Lkrrawebpagemodifiedonbehalfby { get; private set; }

        /// <summary>
        /// Gets the IUserrraapplication.
        /// </summary>
        public virtual IUserrraapplication Userrraapplication { get; private set; }

        /// <summary>
        /// Gets the IUserrraindustrysector.
        /// </summary>
        public virtual IUserrraindustrysector Userrraindustrysector { get; private set; }

        /// <summary>
        /// Gets the IUserrramodule.
        /// </summary>
        public virtual IUserrramodule Userrramodule { get; private set; }

        /// <summary>
        /// Gets the IUserrraprogram.
        /// </summary>
        public virtual IUserrraprogram Userrraprogram { get; private set; }

        /// <summary>
        /// Gets the IUserrraquestion.
        /// </summary>
        public virtual IUserrraquestion Userrraquestion { get; private set; }

        /// <summary>
        /// Gets the IUserrraquestiontype.
        /// </summary>
        public virtual IUserrraquestiontype Userrraquestiontype { get; private set; }

        /// <summary>
        /// Gets the IUserrraresponse.
        /// </summary>
        public virtual IUserrraresponse Userrraresponse { get; private set; }

        /// <summary>
        /// Gets the IUserrrawebpage.
        /// </summary>
        public virtual IUserrrawebpage Userrrawebpage { get; private set; }

        /// <summary>
        /// Gets the IRegardingobjectidrraapplicationtask.
        /// </summary>
        public virtual IRegardingobjectidrraapplicationtask Regardingobjectidrraapplicationtask { get; private set; }

        /// <summary>
        /// Gets the ITeamrraapplication.
        /// </summary>
        public virtual ITeamrraapplication Teamrraapplication { get; private set; }

        /// <summary>
        /// Gets the ITeamrraindustrysector.
        /// </summary>
        public virtual ITeamrraindustrysector Teamrraindustrysector { get; private set; }

        /// <summary>
        /// Gets the ITeamrramodule.
        /// </summary>
        public virtual ITeamrramodule Teamrramodule { get; private set; }

        /// <summary>
        /// Gets the ITeamrraprogram.
        /// </summary>
        public virtual ITeamrraprogram Teamrraprogram { get; private set; }

        /// <summary>
        /// Gets the ITeamrraquestion.
        /// </summary>
        public virtual ITeamrraquestion Teamrraquestion { get; private set; }

        /// <summary>
        /// Gets the ITeamrraquestiontype.
        /// </summary>
        public virtual ITeamrraquestiontype Teamrraquestiontype { get; private set; }

        /// <summary>
        /// Gets the ITeamrraresponse.
        /// </summary>
        public virtual ITeamrraresponse Teamrraresponse { get; private set; }

        /// <summary>
        /// Gets the ITeamrrawebpage.
        /// </summary>
        public virtual ITeamrrawebpage Teamrrawebpage { get; private set; }

        /// <summary>
        /// Gets the IWorkflows.
        /// </summary>
        public virtual IWorkflows Workflows { get; private set; }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling DynamicsClient.Dispose(). False: will not dispose provided httpClient</param>
        protected DynamicsClient(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected DynamicsClient(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected DynamicsClient(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected DynamicsClient(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected DynamicsClient(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DynamicsClient(ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling DynamicsClient.Dispose(). False: will not dispose provided httpClient</param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DynamicsClient(ServiceClientCredentials credentials, HttpClient httpClient, bool disposeHttpClient) : this(httpClient, disposeHttpClient)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DynamicsClient(ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DynamicsClient(System.Uri baseUri, ServiceClientCredentials credentials, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// Initializes a new instance of the DynamicsClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='credentials'>
        /// Required. Subscription credentials which uniquely identify client subscription.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public DynamicsClient(System.Uri baseUri, ServiceClientCredentials credentials, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            BaseUri = baseUri;
            Credentials = credentials;
            if (Credentials != null)
            {
                Credentials.InitializeServiceClient(this);
            }
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            Accounts = new Accounts(this);
            Partyidrraapplication = new Partyidrraapplication(this);
            Regardingobjectidrraapplication = new Regardingobjectidrraapplication(this);
            Objectidrraapplication = new Objectidrraapplication(this);
            Regardingobjectidrraapplicationappointment = new Regardingobjectidrraapplicationappointment(this);
            Regardingobjectidrraindustrysector = new Regardingobjectidrraindustrysector(this);
            Regardingobjectidrramodule = new Regardingobjectidrramodule(this);
            Regardingobjectidrraprogram = new Regardingobjectidrraprogram(this);
            Regardingobjectidrraquestion = new Regardingobjectidrraquestion(this);
            Regardingobjectidrraquestiontype = new Regardingobjectidrraquestiontype(this);
            Regardingobjectidrraresponse = new Regardingobjectidrraresponse(this);
            Regardingobjectidrrawebpage = new Regardingobjectidrrawebpage(this);
            Businessunitrraapplication = new Businessunitrraapplication(this);
            Businessunitrraindustrysector = new Businessunitrraindustrysector(this);
            Businessunitrramodule = new Businessunitrramodule(this);
            Businessunitrraprogram = new Businessunitrraprogram(this);
            Businessunitrraquestion = new Businessunitrraquestion(this);
            Businessunitrraquestiontype = new Businessunitrraquestiontype(this);
            Businessunitrraresponse = new Businessunitrraresponse(this);
            Businessunitrrawebpage = new Businessunitrrawebpage(this);
            Record1idrraapplication = new Record1idrraapplication(this);
            Record2idrraapplication = new Record2idrraapplication(this);
            Contacts = new Contacts(this);
            Contactrraapplicationcontact = new Contactrraapplicationcontact(this);
            Baserecordidrraapplication = new Baserecordidrraapplication(this);
            Baserecordidrraindustrysector = new Baserecordidrraindustrysector(this);
            Baserecordidrramodule = new Baserecordidrramodule(this);
            Baserecordidrraprogram = new Baserecordidrraprogram(this);
            Baserecordidrraquestion = new Baserecordidrraquestion(this);
            Baserecordidrraquestiontype = new Baserecordidrraquestiontype(this);
            Baserecordidrraresponse = new Baserecordidrraresponse(this);
            Baserecordidrrawebpage = new Baserecordidrrawebpage(this);
            Duplicaterecordidrraapplication = new Duplicaterecordidrraapplication(this);
            Duplicaterecordidrraindustrysector = new Duplicaterecordidrraindustrysector(this);
            Duplicaterecordidrramodule = new Duplicaterecordidrramodule(this);
            Duplicaterecordidrraprogram = new Duplicaterecordidrraprogram(this);
            Duplicaterecordidrraquestion = new Duplicaterecordidrraquestion(this);
            Duplicaterecordidrraquestiontype = new Duplicaterecordidrraquestiontype(this);
            Duplicaterecordidrraresponse = new Duplicaterecordidrraresponse(this);
            Duplicaterecordidrrawebpage = new Duplicaterecordidrrawebpage(this);
            Regardingobjectidrraapplicationemail = new Regardingobjectidrraapplicationemail(this);
            Entitydefinitions = new Entitydefinitions(this);
            Regardingobjectidrraapplicationfax = new Regardingobjectidrraapplicationfax(this);
            Globaloptionsetdefinitions = new Globaloptionsetdefinitions(this);
            Regardingobjectidrraapplicationletter = new Regardingobjectidrraapplicationletter(this);
            Regardingobjectidrraapplicationphonecall = new Regardingobjectidrraapplicationphonecall(this);
            Objectidrraindustrysector = new Objectidrraindustrysector(this);
            Objectidrramodule = new Objectidrramodule(this);
            Objectidrraprogram = new Objectidrraprogram(this);
            Objectidrraquestion = new Objectidrraquestion(this);
            Objectidrraquestiontype = new Objectidrraquestiontype(this);
            Objectidrraresponse = new Objectidrraresponse(this);
            Objectidrrawebpage = new Objectidrrawebpage(this);
            Regardingobjectidrraapplicationrecurringappointmentmaster = new Regardingobjectidrraapplicationrecurringappointmentmaster(this);
            Applicationrrawebpageset = new Applicationrrawebpageset(this);
            Applications = new Applications(this);
            Applicationactivityparties = new Applicationactivityparties(this);
            Applicationactivitypointers = new Applicationactivitypointers(this);
            Applicationannotations = new Applicationannotations(this);
            Applicationappointments = new Applicationappointments(this);
            Applicationasyncoperations = new Applicationasyncoperations(this);
            Applicationbulkdeletefailures = new Applicationbulkdeletefailures(this);
            Applicationconnections1 = new Applicationconnections1(this);
            Applicationconnections2 = new Applicationconnections2(this);
            Applicationduplicatebaserecord = new Applicationduplicatebaserecord(this);
            Applicationduplicatematchingrecord = new Applicationduplicatematchingrecord(this);
            Applicationemails = new Applicationemails(this);
            Applicationfaxes = new Applicationfaxes(this);
            Applicationfeedback = new Applicationfeedback(this);
            Applicationletters = new Applicationletters(this);
            Applicationmailboxtrackingfolders = new Applicationmailboxtrackingfolders(this);
            Applicationphonecalls = new Applicationphonecalls(this);
            Applicationprincipalobjectattributeaccesses = new Applicationprincipalobjectattributeaccesses(this);
            Applicationprocesssession = new Applicationprocesssession(this);
            Applicationqueueitems = new Applicationqueueitems(this);
            Applicationrecurringappointmentmasters = new Applicationrecurringappointmentmasters(this);
            Applicationrraresponse = new Applicationrraresponse(this);
            Applicationrrawebpage = new Applicationrrawebpage(this);
            Applicationsharepointdocumentlocations = new Applicationsharepointdocumentlocations(this);
            Applicationsocialactivities = new Applicationsocialactivities(this);
            Applicationsyncerrors = new Applicationsyncerrors(this);
            Applicationtasks = new Applicationtasks(this);
            Applicationteams = new Applicationteams(this);
            Contact = new Contact(this);
            Module = new Module(this);
            Industrysectors = new Industrysectors(this);
            Industrysectorasyncoperations = new Industrysectorasyncoperations(this);
            Industrysectorbulkdeletefailures = new Industrysectorbulkdeletefailures(this);
            Industrysectorduplicatebaserecord = new Industrysectorduplicatebaserecord(this);
            Industrysectorduplicatematchingrecord = new Industrysectorduplicatematchingrecord(this);
            Industrysectormailboxtrackingfolders = new Industrysectormailboxtrackingfolders(this);
            Industrysectorprincipalobjectattributeaccesses = new Industrysectorprincipalobjectattributeaccesses(this);
            Industrysectorprocesssession = new Industrysectorprocesssession(this);
            Industrysectorsyncerrors = new Industrysectorsyncerrors(this);
            Modules = new Modules(this);
            Moduleasyncoperations = new Moduleasyncoperations(this);
            Modulebulkdeletefailures = new Modulebulkdeletefailures(this);
            Moduleduplicatebaserecord = new Moduleduplicatebaserecord(this);
            Moduleduplicatematchingrecord = new Moduleduplicatematchingrecord(this);
            Modulemailboxtrackingfolders = new Modulemailboxtrackingfolders(this);
            Moduleprincipalobjectattributeaccesses = new Moduleprincipalobjectattributeaccesses(this);
            Moduleprocesssession = new Moduleprocesssession(this);
            Modulerraapplication = new Modulerraapplication(this);
            Modulerrawebpage = new Modulerrawebpage(this);
            Modulesyncerrors = new Modulesyncerrors(this);
            Programid = new Programid(this);
            Programs = new Programs(this);
            Programasyncoperations = new Programasyncoperations(this);
            Programbulkdeletefailures = new Programbulkdeletefailures(this);
            Programduplicatebaserecord = new Programduplicatebaserecord(this);
            Programduplicatematchingrecord = new Programduplicatematchingrecord(this);
            Programmailboxtrackingfolders = new Programmailboxtrackingfolders(this);
            Programprincipalobjectattributeaccesses = new Programprincipalobjectattributeaccesses(this);
            Programprocesssession = new Programprocesssession(this);
            Programrramodule = new Programrramodule(this);
            Programsyncerrors = new Programsyncerrors(this);
            Questions = new Questions(this);
            Questionasyncoperations = new Questionasyncoperations(this);
            Questionbulkdeletefailures = new Questionbulkdeletefailures(this);
            Questionduplicatebaserecord = new Questionduplicatebaserecord(this);
            Questionduplicatematchingrecord = new Questionduplicatematchingrecord(this);
            Questionmailboxtrackingfolders = new Questionmailboxtrackingfolders(this);
            Questionprincipalobjectattributeaccesses = new Questionprincipalobjectattributeaccesses(this);
            Questionprocesssession = new Questionprocesssession(this);
            Questionrraresponsequestion = new Questionrraresponsequestion(this);
            Questionsyncerrors = new Questionsyncerrors(this);
            Questiontype = new Questiontype(this);
            Webpageid = new Webpageid(this);
            Questiontypes = new Questiontypes(this);
            Questiontypeasyncoperations = new Questiontypeasyncoperations(this);
            Questiontypebulkdeletefailures = new Questiontypebulkdeletefailures(this);
            Questiontypeduplicatebaserecord = new Questiontypeduplicatebaserecord(this);
            Questiontypeduplicatematchingrecord = new Questiontypeduplicatematchingrecord(this);
            Questiontypemailboxtrackingfolders = new Questiontypemailboxtrackingfolders(this);
            Questiontypeprincipalobjectattributeaccesses = new Questiontypeprincipalobjectattributeaccesses(this);
            Questiontypeprocesssession = new Questiontypeprocesssession(this);
            Questiontypesyncerrors = new Questiontypesyncerrors(this);
            Rraquestiontyperraquestionquestiontype = new Rraquestiontyperraquestionquestiontype(this);
            Responses = new Responses(this);
            Applicationid = new Applicationid(this);
            Question = new Question(this);
            Responseasyncoperations = new Responseasyncoperations(this);
            Responsebulkdeletefailures = new Responsebulkdeletefailures(this);
            Responseduplicatebaserecord = new Responseduplicatebaserecord(this);
            Responseduplicatematchingrecord = new Responseduplicatematchingrecord(this);
            Responsemailboxtrackingfolders = new Responsemailboxtrackingfolders(this);
            Responseprincipalobjectattributeaccesses = new Responseprincipalobjectattributeaccesses(this);
            Responseprocesssession = new Responseprocesssession(this);
            Responsesyncerrors = new Responsesyncerrors(this);
            Webpages = new Webpages(this);
            Moduleid = new Moduleid(this);
            Parentwebpage = new Parentwebpage(this);
            Parentwebpageid = new Parentwebpageid(this);
            Webpageasyncoperations = new Webpageasyncoperations(this);
            Webpagebulkdeletefailures = new Webpagebulkdeletefailures(this);
            Webpageduplicatebaserecord = new Webpageduplicatebaserecord(this);
            Webpageduplicatematchingrecord = new Webpageduplicatematchingrecord(this);
            Webpagemailboxtrackingfolders = new Webpagemailboxtrackingfolders(this);
            Webpageprincipalobjectattributeaccesses = new Webpageprincipalobjectattributeaccesses(this);
            Webpageprocesssession = new Webpageprocesssession(this);
            Webpagerraquestion = new Webpagerraquestion(this);
            Webpagesyncerrors = new Webpagesyncerrors(this);
            Savedqueries = new Savedqueries(this);
            Sharepointdocumentlocations = new Sharepointdocumentlocations(this);
            Sharepointsites = new Sharepointsites(this);
            Regardingobjectidrraapplicationsocialactivity = new Regardingobjectidrraapplicationsocialactivity(this);
            Systemforms = new Systemforms(this);
            Systemusers = new Systemusers(this);
            Lkrraapplicationcreatedby = new Lkrraapplicationcreatedby(this);
            Lkrraapplicationcreatedonbehalfby = new Lkrraapplicationcreatedonbehalfby(this);
            Lkrraapplicationmodifiedby = new Lkrraapplicationmodifiedby(this);
            Lkrraapplicationmodifiedonbehalfby = new Lkrraapplicationmodifiedonbehalfby(this);
            Lkrraindustrysectorcreatedby = new Lkrraindustrysectorcreatedby(this);
            Lkrraindustrysectorcreatedonbehalfby = new Lkrraindustrysectorcreatedonbehalfby(this);
            Lkrraindustrysectormodifiedby = new Lkrraindustrysectormodifiedby(this);
            Lkrraindustrysectormodifiedonbehalfby = new Lkrraindustrysectormodifiedonbehalfby(this);
            Lkrramodulecreatedby = new Lkrramodulecreatedby(this);
            Lkrramodulecreatedonbehalfby = new Lkrramodulecreatedonbehalfby(this);
            Lkrramodulemodifiedby = new Lkrramodulemodifiedby(this);
            Lkrramodulemodifiedonbehalfby = new Lkrramodulemodifiedonbehalfby(this);
            Lkrraprogramcreatedby = new Lkrraprogramcreatedby(this);
            Lkrraprogramcreatedonbehalfby = new Lkrraprogramcreatedonbehalfby(this);
            Lkrraprogrammodifiedby = new Lkrraprogrammodifiedby(this);
            Lkrraprogrammodifiedonbehalfby = new Lkrraprogrammodifiedonbehalfby(this);
            Lkrraquestioncreatedby = new Lkrraquestioncreatedby(this);
            Lkrraquestioncreatedonbehalfby = new Lkrraquestioncreatedonbehalfby(this);
            Lkrraquestionmodifiedby = new Lkrraquestionmodifiedby(this);
            Lkrraquestionmodifiedonbehalfby = new Lkrraquestionmodifiedonbehalfby(this);
            Lkrraquestiontypecreatedby = new Lkrraquestiontypecreatedby(this);
            Lkrraquestiontypecreatedonbehalfby = new Lkrraquestiontypecreatedonbehalfby(this);
            Lkrraquestiontypemodifiedby = new Lkrraquestiontypemodifiedby(this);
            Lkrraquestiontypemodifiedonbehalfby = new Lkrraquestiontypemodifiedonbehalfby(this);
            Lkrraresponsecreatedby = new Lkrraresponsecreatedby(this);
            Lkrraresponsecreatedonbehalfby = new Lkrraresponsecreatedonbehalfby(this);
            Lkrraresponsemodifiedby = new Lkrraresponsemodifiedby(this);
            Lkrraresponsemodifiedonbehalfby = new Lkrraresponsemodifiedonbehalfby(this);
            Lkrrawebpagecreatedby = new Lkrrawebpagecreatedby(this);
            Lkrrawebpagecreatedonbehalfby = new Lkrrawebpagecreatedonbehalfby(this);
            Lkrrawebpagemodifiedby = new Lkrrawebpagemodifiedby(this);
            Lkrrawebpagemodifiedonbehalfby = new Lkrrawebpagemodifiedonbehalfby(this);
            Userrraapplication = new Userrraapplication(this);
            Userrraindustrysector = new Userrraindustrysector(this);
            Userrramodule = new Userrramodule(this);
            Userrraprogram = new Userrraprogram(this);
            Userrraquestion = new Userrraquestion(this);
            Userrraquestiontype = new Userrraquestiontype(this);
            Userrraresponse = new Userrraresponse(this);
            Userrrawebpage = new Userrrawebpage(this);
            Regardingobjectidrraapplicationtask = new Regardingobjectidrraapplicationtask(this);
            Teamrraapplication = new Teamrraapplication(this);
            Teamrraindustrysector = new Teamrraindustrysector(this);
            Teamrramodule = new Teamrramodule(this);
            Teamrraprogram = new Teamrraprogram(this);
            Teamrraquestion = new Teamrraquestion(this);
            Teamrraquestiontype = new Teamrraquestiontype(this);
            Teamrraresponse = new Teamrraresponse(this);
            Teamrrawebpage = new Teamrrawebpage(this);
            Workflows = new Workflows(this);
            BaseUri = new System.Uri("http://localhost");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }
    }
}
